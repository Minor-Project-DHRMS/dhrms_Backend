string private officeName;
string private phoneNumber;
address private GID;

setOfficeName
setPhoneNumber
setGID
getOfficeName
getPhoneNumber
getGID

Hospital : 
 string private hospitalName;
    address private HID;
    string private phoneNumber;
    mapping(address => bool) private doctors;
    mapping(address => bool) private patients;
    address[] doctorsList;
    address[] patientsList;

    struct fileDetails {
        address PID;
        string file;
        address DID;
        address HID;
        uint256 timeStamp;
    }

    getHospitalName
    setHospitalName
    getHID
    setHID
    getPhoneNumber
    setPhoneNumber
    addDoctor
    removeDoctor
    getDoctorsList
    removePatient
    getPatientsList
    isPatient
    addToUplaodQueue
    getUploadQueue
    removeReport


Doctor
string private doctorName;
    address private DID;
    string private phoneNumber;
    string private qualification;
    string private photo;
    string private dob;
    address private HID;
    mapping(address => bool) private patients;
    address[] patientlist;
    string private department;
    uint256 patientCount;

    getDoctorName
    setDoctordoctorName
getDID
setDID
setphoneNumber
getphoneNumber
setQualification
setPhoto
getPhoto
setDob
getDob
setDepartment
getDepartment
setHospital
getHospital
addPatient
removePatient
getPatientList

Main Contract : 

 bytes32 public constant GOVERNMENT = keccak256("GOVERNMENT");
    bytes32 public constant PATIENT = keccak256("PATIENT");
    bytes32 public constant HOSPITAL = keccak256("HOSPITAL");
    bytes32 public constant DOCTOR = keccak256("DOCTOR");

    mapping(address => address) patientDetails;
    mapping(address => address) doctorDetails;
    mapping(address => address) hospitalDetails;
    mapping(address => address) governmentDetails;

    event newOffice(string officeName, string _phoneNumber, address _GID);
    event newHospital(string HospitalName, string ph_no, address HID);
    event newDoctor(
        string _doctorName,
        string _phoneNumber,
        string _qualification,
        string _photo,
        string _dob,
        address _HID,
        address _DID,
        string _department
    );
    event newPatient(string _details, address _PID);
    event newReadAccess(address _DID);
    event newWriteAccess(address _HID);
    event removeReadAccessDoctor(address _DID);
    event removeWriteAccessHospital(address _HID);
    event newRecordForUpload(string _file, address _PID);
    event newRecordForUploadH(string _file, address _PID, address _HID);

    addGovernmentOffice
    addHospital
    addDoctor
    addPatient
    giveReadAccess
    giveWriteAccess
    removeReadAccess
    removeWriteAccess
    sendRecordsForUpload
    sendRecordsForUploadH
    reportUploaded
    getDoctorsList
    getHospitalsList
    getRecordsHistory
    getPatientDetails
    getDoctorDetails
    getPatientList
    getDoctorH
    getHospitalDetails
    getHospitalDoctorList
    getHospitalPatientList
    getGovernmentDetails
    isPatient
    isHospital
    isDoctor
    onlyGoverment